{"version":3,"file":"ember-data-serializer.js","sources":["../src/ember-data-serializer.js"],"sourcesContent":["import { get } from '@ember/object';\n\nimport { isFunction } from 'lodash-es';\nimport {\n  _utilsInflectorCamelize as camelize,\n  _utilsInflectorDasherize as dasherize,\n  RestSerializer,\n} from 'miragejs';\n\n/**\n * This serializer does not use following mirage properties to control how things are serialized\n *\n *     attrs - see `serialize` on the transform property\n *     embed - see `serialize` on the transform property\n *     serializeIds - see serialize on the transform property\n *\n * The above configuration was applied to every property on the serializer, whereas the transforms allows you\n * to specify a value for each property or relation.\n *\n * This serializer uses a property `transforms` that follows the Ember Data serializer format of `attrs` to specify the\n * serialization (`attrs` is already in use by mirageJs).\n *\n * The startMirage has been modified to also generate serializers from the Ember Data serializers supporting\n * the key and the serialize/deserialize properties with the value of (true/ids/records). If a serializer is\n * already present in the mirage directory, the transforms will be added to it. If that serializer is not\n * a serializer of this type, there will be no effect.  Ensure that your serializers and/or the application\n * serializer in the mirage directory is a type of this serializer\n *\n * @class EmberDataSerializer\n * @constructor\n * @public\n *\n */\nlet EmberDataSerializer = RestSerializer.extend({\n  /**\n   * The property name for the primary key for mirage and ember data is normally `id`. This allows you\n   * to specify what that property name should be in the JSON.\n   */\n  primaryKey: 'id',\n\n  /**\n   * Transforms follow the format of ember data serializer attrs as follows\n   *\n   * {\n   *   property: {    // property would be the name of the property in the mirage store\n   *      key: 'externalKey',   // externalKey would be the name in the JSON\n   *      serialize: 'ids',     // how should this property be serialized and deserialized\n   *      deserialize: 'ids'    // the default is 'ids' that is the id of the releation\n   *                            // or 'records', that is, embed the full record instead of the id\n   *                            // or false, do not serialize or deserialize as applied\n   *   }\n   * }\n   *\n   * These transforms will be created from the attrs on the corresponding serializer in ember data much like\n   * the models for mirage are created from the models in in ember date. If the transforms key is specified, it\n   * will overlay the definition created from the serializer key for key. That is you could override some\n   * of the transform definition.\n   */\n  transforms: undefined,\n  // resolved transforms\n  _transforms: undefined,\n\n  // These are the defaults\n  // include: []\n\n  keyForId() {\n    return this.primaryKey;\n  },\n\n  getKeysForIncluded() {\n    return isFunction(this.include)\n      ? this.include(this.request, this.primaryResource)\n      : this.include;\n  },\n\n  getTransforms() {\n    return this.transforms || {};\n  },\n\n  getResolvedTransforms() {\n    if (!this._resolvedTransforms) {\n      this._resolvedTransforms = {\n        serialize: {},\n        normalize: {},\n      };\n    }\n\n    return this._resolvedTransforms;\n  },\n\n  getTransformForSerialize(key) {\n    let resolvedTransforms = this.getResolvedTransforms();\n    let transforms = this.getTransforms();\n\n    if (!resolvedTransforms.serialize[key]) {\n      let transform =\n        typeof transforms[key] === 'string'\n          ? { key: transforms[key] }\n          : Object.assign({}, transforms[key]);\n\n      resolvedTransforms.serialize[key] = Object.assign(\n        { key: key, serialize: 'ids', deserialize: 'ids' },\n        transform,\n      );\n    }\n\n    return resolvedTransforms.serialize[key];\n  },\n\n  getTransformForNormalize(key) {\n    let resolvedTransforms = this.getResolvedTransforms();\n\n    if (!resolvedTransforms.normalize[key]) {\n      let transforms = this.getTransforms();\n      let foundKey;\n      let foundTransform = Object.keys(transforms).find((item) => {\n        foundKey = item;\n\n        return transforms[item].key === key;\n      });\n      let transform = foundTransform\n        ? Object.assign({}, transforms[foundKey], { key: foundKey })\n        : { key: key, serialize: 'ids', deserialize: 'ids' };\n\n      resolvedTransforms.normalize[key] = transform;\n    }\n\n    return resolvedTransforms.normalize[key];\n  },\n\n  /**\n   *\n   * @param model\n   * @param removeForeignKeys\n   * @param didSerialize\n   * @returns {*}\n   * @private\n   */\n  _hashForModel(model, removeForeignKeys, didSerialize = {}) {\n    let attrs = this._attrsForModel(model);\n\n    let newDidSerialize = Object.assign({}, didSerialize);\n\n    newDidSerialize[model.modelName] = newDidSerialize[model.modelName] || {};\n    newDidSerialize[model.modelName][model.id] = true;\n\n    model.associationKeys.forEach((key) => {\n      let transform = this.getTransformForSerialize(key);\n\n      if (transform.serialize) {\n        let associatedResource = model[key];\n\n        let serializeOption = transform.serialize;\n\n        if (\n          associatedResource &&\n          get(\n            newDidSerialize,\n            `${associatedResource.modelName}.${associatedResource.id}`,\n          )\n        ) {\n          // force it to IDS if we already have serialized it to prevent recursion\n          // TODO: However is the end system wants records, we need to send records, so this really should be do records, dont resurse\n          serializeOption = 'ids';\n        }\n\n        if (serializeOption === 'records') {\n          let [associatedResourceHash] = this.getHashForResource(\n            associatedResource,\n            false,\n            newDidSerialize,\n            true,\n          );\n          let formattedKey =\n            this._keyForProperty(key) || this.isCollection(associatedResource)\n              ? this.keyForRelationship(key)\n              : this.keyForEmbeddedRelationship(key);\n\n          attrs[formattedKey] = associatedResourceHash;\n        } else {\n          let formattedKey =\n            this._keyForProperty(key) || this.keyForRelationshipIds(key);\n\n          if (this.isCollection(associatedResource)) {\n            attrs[formattedKey] =\n              model[`${this._container.inflector.singularize(key)}Ids`];\n          } else {\n            attrs[formattedKey] =\n              model[`${this._container.inflector.singularize(key)}Id`];\n          }\n        }\n      }\n    });\n\n    return attrs;\n  },\n\n  _keyForProperty(attr) {\n    let transform = this.getTransformForSerialize(attr);\n\n    return transform.key;\n  },\n\n  keyForAttribute(attr) {\n    if (attr === 'id') {\n      return this.keyForId();\n    }\n\n    return (\n      this._keyForProperty(attr) ||\n      RestSerializer.prototype.keyForAttribute.apply(this, arguments)\n    );\n  },\n\n  keyForRelationship(type) {\n    return (\n      this._keyForProperty(type) ||\n      RestSerializer.prototype.keyForRelationship.apply(this, arguments)\n    );\n  },\n\n  keyForEmbeddedRelationship(attributeName) {\n    return (\n      this._keyForProperty(attributeName) ||\n      RestSerializer.prototype.keyForEmbeddedRelationship.apply(this, arguments)\n    );\n  },\n\n  keyForRelationshipIds(type) {\n    return (\n      this._keyForProperty(type) ||\n      RestSerializer.prototype.keyForRelationshipIds.apply(this, arguments)\n    );\n  },\n\n  keyForForeignKey(relationshipName) {\n    return (\n      this._keyForProperty(relationshipName) ||\n      RestSerializer.prototype.keyForForeignKey.apply(this, arguments)\n    );\n  },\n\n  normalize(payload) {\n    // was it not wrapped when serialized?\n    if (this.root === false) {\n      let p = {};\n\n      p[this.type] = payload;\n      payload = p;\n    }\n\n    let type = Object.keys(payload)[0];\n    let attrs = payload[type];\n    let modelName = camelize(type);\n    let modelClass = this.schema.modelClassFor(modelName);\n    let { belongsToAssociations, hasManyAssociations } = modelClass;\n    let belongsToKeys = Object.keys(belongsToAssociations);\n    let hasManyKeys = Object.keys(hasManyAssociations);\n\n    let jsonApiPayload = {\n      data: {\n        type: this._container.inflector.pluralize(type),\n        attributes: {},\n      },\n    };\n\n    if (attrs[this.primaryKey]) {\n      jsonApiPayload.data.id = attrs[this.primaryKey];\n    }\n\n    let relationships = {};\n\n    Object.keys(attrs).forEach((attrKey) => {\n      if (attrKey !== this.primaryKey) {\n        let transform = this.getTransformForNormalize(attrKey);\n        let key = transform.key || attrKey;\n\n        if (this.normalizeIds) {\n          if (belongsToKeys.includes(key)) {\n            let association = belongsToAssociations[key];\n            let associationModel = association.modelName;\n\n            relationships[dasherize(key)] = {\n              data: {\n                type: associationModel,\n                id: attrs[attrKey],\n              },\n            };\n          } else if (hasManyKeys.includes(key)) {\n            let association = hasManyAssociations[key];\n            let associationModel = association.modelName;\n            let data = attrs[attrKey].map((id) => {\n              return {\n                type: associationModel,\n                id,\n              };\n            });\n\n            relationships[dasherize(key)] = { data };\n          } else {\n            jsonApiPayload.data.attributes[dasherize(key)] = attrs[attrKey];\n          }\n        } else {\n          jsonApiPayload.data.attributes[dasherize(key)] = attrs[attrKey];\n        }\n      }\n    });\n\n    if (Object.keys(relationships).length) {\n      jsonApiPayload.data.relationships = relationships;\n    }\n\n    return jsonApiPayload;\n  },\n});\n\nexport default EmberDataSerializer;\n"],"names":["EmberDataSerializer","RestSerializer","extend","primaryKey","transforms","undefined","_transforms","keyForId","getKeysForIncluded","isFunction","include","request","primaryResource","getTransforms","getResolvedTransforms","_resolvedTransforms","serialize","normalize","getTransformForSerialize","key","resolvedTransforms","transform","Object","assign","deserialize","getTransformForNormalize","foundKey","foundTransform","keys","find","item","_hashForModel","model","removeForeignKeys","didSerialize","attrs","_attrsForModel","newDidSerialize","modelName","id","associationKeys","forEach","associatedResource","serializeOption","get","associatedResourceHash","getHashForResource","formattedKey","_keyForProperty","isCollection","keyForRelationship","keyForEmbeddedRelationship","keyForRelationshipIds","_container","inflector","singularize","attr","keyForAttribute","prototype","apply","arguments","type","attributeName","keyForForeignKey","relationshipName","payload","root","p","camelize","modelClass","schema","modelClassFor","belongsToAssociations","hasManyAssociations","belongsToKeys","hasManyKeys","jsonApiPayload","data","pluralize","attributes","relationships","attrKey","normalizeIds","includes","association","associationModel","dasherize","map","length"],"mappings":"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"}